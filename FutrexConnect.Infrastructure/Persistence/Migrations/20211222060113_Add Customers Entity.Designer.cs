// <auto-generated />
using System;
using FutrexConnect.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FutrexConnect.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20211222060113_Add Customers Entity")]
    partial class AddCustomersEntity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FutrexConnect.Domain.Entities.City", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("CityCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("StateId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CityCode = "DXB",
                            CityName = "Dubai",
                            IsActive = false,
                            StateId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CityCode = "BOM",
                            CityName = "Mumbai",
                            IsActive = false,
                            StateId = 1L
                        });
                });

            modelBuilder.Entity("FutrexConnect.Domain.Entities.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryPhoneCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CountryCode = "UAE",
                            CountryName = "United Arab Emirates",
                            IsActive = false
                        },
                        new
                        {
                            Id = 2L,
                            CountryCode = "IND",
                            CountryName = "India",
                            IsActive = false
                        });
                });

            modelBuilder.Entity("FutrexConnect.Domain.Entities.Currency", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrencyCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrencyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("FutrexConnect.Domain.Entities.Customer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CustomerName = "Fitnerss First",
                            CustomerType = "Serviceprovider"
                        },
                        new
                        {
                            Id = 2L,
                            CustomerName = "John Doe",
                            CustomerType = "IndividualUser"
                        });
                });

            modelBuilder.Entity("FutrexConnect.Domain.Entities.CustomerAddressDetails", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Address1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CompanyLogo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("OfficeFax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PinCode")
                        .HasColumnType("int");

                    b.Property<long?>("StateId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StateId");

                    b.ToTable("CustomerAddressDetails");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CityId = 1L,
                            CountryId = 2L,
                            CustomerId = 1L,
                            PinCode = 0,
                            StateId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CityId = 2L,
                            CountryId = 2L,
                            CustomerId = 2L,
                            PinCode = 0,
                            StateId = 2L
                        });
                });

            modelBuilder.Entity("FutrexConnect.Domain.Entities.CustomerContactDetails", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<string>("DesignationCategory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MobilePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficePhone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerContactDetails");
                });

            modelBuilder.Entity("FutrexConnect.Domain.Entities.CustomerSupportingDocuments", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<string>("DocumentTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentUniqueReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerSupportingDocuments");
                });

            modelBuilder.Entity("FutrexConnect.Domain.Entities.HealthParameter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("HealthParameterGroupId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ParameterCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParameterName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HealthParameterGroupId");

                    b.ToTable("HealthParameters");
                });

            modelBuilder.Entity("FutrexConnect.Domain.Entities.HealthParameterGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ParameterGroupCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParameterGroupName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("HealthParameterGroups");
                });

            modelBuilder.Entity("FutrexConnect.Domain.Entities.HealthReferenceRow", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("HealthParameterId")
                        .HasColumnType("bigint");

                    b.Property<string>("HealthParameterResult")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("HealthReferenceTableId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HealthParameterId");

                    b.HasIndex("HealthReferenceTableId");

                    b.ToTable("HealthReferenceRows");
                });

            modelBuilder.Entity("FutrexConnect.Domain.Entities.HealthReferenceRowCriteria", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("ComparisonOperator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComparisonValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<long?>("HealthParameterToCompareId")
                        .HasColumnType("bigint");

                    b.Property<long?>("HealthReferenceRowId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HealthParameterToCompareId");

                    b.HasIndex("HealthReferenceRowId");

                    b.ToTable("HealthReferenceRowCriterias");
                });

            modelBuilder.Entity("FutrexConnect.Domain.Entities.HealthReferenceTable", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("TableDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("HealthReferenceTables");
                });

            modelBuilder.Entity("FutrexConnect.Domain.Entities.Individual", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FutrexConnectID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IndividualName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobilePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProfileImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("StateId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("StateId");

                    b.ToTable("Individuals");
                });

            modelBuilder.Entity("FutrexConnect.Domain.Entities.Organization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Address1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("BaseCurrencyId")
                        .HasColumnType("bigint");

                    b.Property<long>("CityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CompanyLogo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("OfficeFax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PinCode")
                        .HasColumnType("int");

                    b.Property<long?>("StateId")
                        .HasColumnType("bigint");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BaseCurrencyId");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("StateId");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("FutrexConnect.Domain.Entities.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProductCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ProductColorId")
                        .HasColumnType("bigint");

                    b.Property<string>("ProductDisplayCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ProductGroupId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProductModelId")
                        .HasColumnType("bigint");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductColorId");

                    b.HasIndex("ProductGroupId");

                    b.HasIndex("ProductModelId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("FutrexConnect.Domain.Entities.ProductColor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProductColorCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductColorName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductColors");
                });

            modelBuilder.Entity("FutrexConnect.Domain.Entities.ProductGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProductGroupCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductGroupName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductGroups");
                });

            modelBuilder.Entity("FutrexConnect.Domain.Entities.ProductModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProductModelCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductModelName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductModels");
                });

            modelBuilder.Entity("FutrexConnect.Domain.Entities.State", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("StateCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StateName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("States");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CountryId = 1L,
                            IsActive = false,
                            StateCode = "DXB",
                            StateName = "Dubai"
                        },
                        new
                        {
                            Id = 2L,
                            CountryId = 1L,
                            IsActive = false,
                            StateCode = "MH",
                            StateName = "Maharashtra"
                        });
                });

            modelBuilder.Entity("FutrexConnect.Domain.Entities.SystemLanguage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LanguageCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("SystemLanguages");
                });

            modelBuilder.Entity("FutrexConnect.Domain.Entities.UnitOfMeasure", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UOMCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UOMGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UOMName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UnitOfMeasures");
                });

            modelBuilder.Entity("FutrexConnect.Domain.Entities.UOMConversion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<double>("Conversion")
                        .HasColumnType("float");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("SourceUOMId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TargetUOMId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SourceUOMId");

                    b.HasIndex("TargetUOMId");

                    b.ToTable("UOMConversions");
                });

            modelBuilder.Entity("FutrexConnect.Domain.Entities.City", b =>
                {
                    b.HasOne("FutrexConnect.Domain.Entities.State", "State")
                        .WithMany("Cities")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("FutrexConnect.Domain.Entities.CustomerAddressDetails", b =>
                {
                    b.HasOne("FutrexConnect.Domain.Entities.City", "City")
                        .WithMany("CustomerAddressDetails")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FutrexConnect.Domain.Entities.Country", "Country")
                        .WithMany("CustomerAddressDetails")
                        .HasForeignKey("CountryId");

                    b.HasOne("FutrexConnect.Domain.Entities.Customer", "Customer")
                        .WithMany("AddressDetails")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FutrexConnect.Domain.Entities.State", "State")
                        .WithMany("CustomerAddressDetails")
                        .HasForeignKey("StateId");

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("Customer");

                    b.Navigation("State");
                });

            modelBuilder.Entity("FutrexConnect.Domain.Entities.CustomerContactDetails", b =>
                {
                    b.HasOne("FutrexConnect.Domain.Entities.Customer", "Customer")
                        .WithMany("ContactDetails")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("FutrexConnect.Domain.Entities.CustomerSupportingDocuments", b =>
                {
                    b.HasOne("FutrexConnect.Domain.Entities.Customer", "Customer")
                        .WithMany("SupportingDocuments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("FutrexConnect.Domain.Entities.HealthParameter", b =>
                {
                    b.HasOne("FutrexConnect.Domain.Entities.HealthParameterGroup", "HealthParameterGroup")
                        .WithMany("HealthParameters")
                        .HasForeignKey("HealthParameterGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HealthParameterGroup");
                });

            modelBuilder.Entity("FutrexConnect.Domain.Entities.HealthReferenceRow", b =>
                {
                    b.HasOne("FutrexConnect.Domain.Entities.HealthParameter", "HealthParameter")
                        .WithMany("HealthReferenceRows")
                        .HasForeignKey("HealthParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FutrexConnect.Domain.Entities.HealthReferenceTable", "HealthReferenceTable")
                        .WithMany("HealthReferenceRows")
                        .HasForeignKey("HealthReferenceTableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HealthParameter");

                    b.Navigation("HealthReferenceTable");
                });

            modelBuilder.Entity("FutrexConnect.Domain.Entities.HealthReferenceRowCriteria", b =>
                {
                    b.HasOne("FutrexConnect.Domain.Entities.HealthParameter", "HealthParameterToCompare")
                        .WithMany("HealthReferenceRowCriterias")
                        .HasForeignKey("HealthParameterToCompareId");

                    b.HasOne("FutrexConnect.Domain.Entities.HealthReferenceRow", "HealthReferenceRow")
                        .WithMany("HealthReferenceRowCriterias")
                        .HasForeignKey("HealthReferenceRowId");

                    b.Navigation("HealthParameterToCompare");

                    b.Navigation("HealthReferenceRow");
                });

            modelBuilder.Entity("FutrexConnect.Domain.Entities.Individual", b =>
                {
                    b.HasOne("FutrexConnect.Domain.Entities.City", "City")
                        .WithMany("Individuals")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FutrexConnect.Domain.Entities.Country", "Country")
                        .WithMany("Individuals")
                        .HasForeignKey("CountryId");

                    b.HasOne("FutrexConnect.Domain.Entities.State", "State")
                        .WithMany("Individuals")
                        .HasForeignKey("StateId");

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("State");
                });

            modelBuilder.Entity("FutrexConnect.Domain.Entities.Organization", b =>
                {
                    b.HasOne("FutrexConnect.Domain.Entities.Currency", "BaseCurrency")
                        .WithMany("Organizations")
                        .HasForeignKey("BaseCurrencyId");

                    b.HasOne("FutrexConnect.Domain.Entities.City", "City")
                        .WithMany("Organizations")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FutrexConnect.Domain.Entities.Country", "Country")
                        .WithMany("Organizations")
                        .HasForeignKey("CountryId");

                    b.HasOne("FutrexConnect.Domain.Entities.State", "State")
                        .WithMany("Organizations")
                        .HasForeignKey("StateId");

                    b.Navigation("BaseCurrency");

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("State");
                });

            modelBuilder.Entity("FutrexConnect.Domain.Entities.Product", b =>
                {
                    b.HasOne("FutrexConnect.Domain.Entities.ProductColor", "ProductColor")
                        .WithMany("Products")
                        .HasForeignKey("ProductColorId");

                    b.HasOne("FutrexConnect.Domain.Entities.ProductGroup", "ProductGroup")
                        .WithMany("Products")
                        .HasForeignKey("ProductGroupId");

                    b.HasOne("FutrexConnect.Domain.Entities.ProductModel", "ProductModel")
                        .WithMany("Products")
                        .HasForeignKey("ProductModelId");

                    b.Navigation("ProductColor");

                    b.Navigation("ProductGroup");

                    b.Navigation("ProductModel");
                });

            modelBuilder.Entity("FutrexConnect.Domain.Entities.State", b =>
                {
                    b.HasOne("FutrexConnect.Domain.Entities.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("FutrexConnect.Domain.Entities.UOMConversion", b =>
                {
                    b.HasOne("FutrexConnect.Domain.Entities.UnitOfMeasure", "SourceUnitOfMeasure")
                        .WithMany("UOMSrcConversions")
                        .HasForeignKey("SourceUOMId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FutrexConnect.Domain.Entities.UnitOfMeasure", "TargetUnitOfMeasure")
                        .WithMany("UOMTargetConversions")
                        .HasForeignKey("TargetUOMId");

                    b.Navigation("SourceUnitOfMeasure");

                    b.Navigation("TargetUnitOfMeasure");
                });

            modelBuilder.Entity("FutrexConnect.Domain.Entities.City", b =>
                {
                    b.Navigation("CustomerAddressDetails");

                    b.Navigation("Individuals");

                    b.Navigation("Organizations");
                });

            modelBuilder.Entity("FutrexConnect.Domain.Entities.Country", b =>
                {
                    b.Navigation("CustomerAddressDetails");

                    b.Navigation("Individuals");

                    b.Navigation("Organizations");

                    b.Navigation("States");
                });

            modelBuilder.Entity("FutrexConnect.Domain.Entities.Currency", b =>
                {
                    b.Navigation("Organizations");
                });

            modelBuilder.Entity("FutrexConnect.Domain.Entities.Customer", b =>
                {
                    b.Navigation("AddressDetails");

                    b.Navigation("ContactDetails");

                    b.Navigation("SupportingDocuments");
                });

            modelBuilder.Entity("FutrexConnect.Domain.Entities.HealthParameter", b =>
                {
                    b.Navigation("HealthReferenceRowCriterias");

                    b.Navigation("HealthReferenceRows");
                });

            modelBuilder.Entity("FutrexConnect.Domain.Entities.HealthParameterGroup", b =>
                {
                    b.Navigation("HealthParameters");
                });

            modelBuilder.Entity("FutrexConnect.Domain.Entities.HealthReferenceRow", b =>
                {
                    b.Navigation("HealthReferenceRowCriterias");
                });

            modelBuilder.Entity("FutrexConnect.Domain.Entities.HealthReferenceTable", b =>
                {
                    b.Navigation("HealthReferenceRows");
                });

            modelBuilder.Entity("FutrexConnect.Domain.Entities.ProductColor", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("FutrexConnect.Domain.Entities.ProductGroup", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("FutrexConnect.Domain.Entities.ProductModel", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("FutrexConnect.Domain.Entities.State", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("CustomerAddressDetails");

                    b.Navigation("Individuals");

                    b.Navigation("Organizations");
                });

            modelBuilder.Entity("FutrexConnect.Domain.Entities.UnitOfMeasure", b =>
                {
                    b.Navigation("UOMSrcConversions");

                    b.Navigation("UOMTargetConversions");
                });
#pragma warning restore 612, 618
        }
    }
}
